1장

item 3
코드 생성과 타입이 관계없음을 이해하기

● 큰 그림에서 타입스크립트 컴파일러는 두 가지 역할을 수행합니다.
 1. 최신 타입스크립트 / 자바스크립트를 브라우저에서 동작할 수 있도록 구버전의 자바스크립트로 트랜파일(transpile)합니다.
 2. 코드타입 오류를 체크합니다.
  == 이 두가지 행동은 서로 완전하게 독립적이다.
 * transpile : translate + compile
 * 소스코드를 동일한 동작을 하는 다른 형태의 소스코드(다른 버전, 다른 언어 등)로 변환하는 행위를 위미한다.
 * 결과물이 여전히 컴파일 되어야하는 소스코드이기 때문에 컴파일과는 구분해서 부릅니다.

● 타입오류가 있는 코드도 컴파일이 가능합니다.
 - 컴파일은 타입 체크와 독립적으로 동작하기 때문에, 타입 오류가 있는 코드도 컴파일 가능합니다.
 - 만약 오류가 있을 때 컴파일하지 않으려면, tsconfig.json에 noEmitOnError를 설정하거나 빌드 도구에 동일하게 적용하면 됩니다.

● 런타임에는 타입체크가 불가능하다.
== Code ==
    interface Square {
        width: number;
    }
    interface Rectangle extends Square {
        height: number;
    }
    type Shape = Square | Rectangle;

    function CalculateArea(shape : Shape) {
        if(shape instanceof Rectangle) {
                // Rectangle은 형식만 참조하지만,
                // 여기서는 값으로 사용되고 있다.
            return shape.width * shape.height;
                // Shape 형식에 height 속성이 없다.
        }
        else {
            return shape.width * shape.width;
        }
    }


● 타입 연산은 런타임에 영향을 주지 않습니다.

● 타입스크립트의 타입은 런타임에 영향을 주지 않습니다.

== 요약 ==
1. 코드 생성은 타입 시스템과 무관하다. 타입스크립트 타입은 런타임 동작이나 성능에 영향을 주지 않습니다.
2. 타입 오류가 존재하더라도 코드 생성(컴파일)은 가능합니다.
3. 타입스크립트 타입은 런타임에 사용할 수 없습니다.